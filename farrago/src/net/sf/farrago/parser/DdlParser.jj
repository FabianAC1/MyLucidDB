/*
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
*/

options {
    STATIC = false;
    IGNORE_CASE = true;
    UNICODE_INPUT = true;
}

PARSER_BEGIN(FarragoParserImpl)

package net.sf.farrago.parser.impl;

import net.sf.farrago.parser.*;
import net.sf.farrago.catalog.*;
import net.sf.farrago.resource.*;
import net.sf.farrago.ddl.*;
import net.sf.farrago.query.*;
import net.sf.farrago.session.*;
import org.eigenbase.reltype.*;
import org.eigenbase.sql.*;
import org.eigenbase.sql.fun.*;
import org.eigenbase.sql.parser.*;
import org.eigenbase.sql.type.*;
import org.eigenbase.util.*;
import org.eigenbase.util14.*;
import org.eigenbase.resource.*;
import net.sf.farrago.resource.*;
import java.math.*;
import java.util.*;
import javax.jmi.reflect.*;
import java.sql.*;

import net.sf.farrago.cwm.*;
import net.sf.farrago.cwm.core.*;
import net.sf.farrago.cwm.datatypes.*;
import net.sf.farrago.cwm.relational.*;
import net.sf.farrago.cwm.relational.enumerations.*;
import net.sf.farrago.cwm.keysindexes.*;
import net.sf.farrago.cwm.behavioral.*;

import net.sf.farrago.fem.med.*;
import net.sf.farrago.fem.security.*;
import net.sf.farrago.fem.sql2003.*;


/**
 * Farrago SQL parser implementation, generated from DdlParser.jj and
 * CommonParser.jj by JavaCC.
 *
 * @author John V. Sichi
 * @version $Id$
 */
public class FarragoParserImpl extends FarragoAbstractParserImpl
{
    private static Metadata metadata;

    // implement FarragoAbstractParserImpl
    public SqlParserPos getCurrentPosition()
    {
        return new SqlParserPos(
            token.beginLine,
            token.beginColumn);
    }

    // implement SqlAbstractParserImpl
    public SqlParseException normalizeException(Throwable ex)
    {
        try {
            if (ex instanceof ParseException) {
                ex = cleanupParseException((ParseException) ex);
            }
            return convertException(ex);
        } catch (ParseException e) {
            throw new AssertionError(e);
        }
    }

    // implement SqlAbstractParserImpl
    public Metadata getMetadata()
    {
        synchronized (FarragoParserImpl.class) {
            if (metadata == null) {
                metadata = new MetadataImpl(
                    new FarragoParserImpl(new java.io.StringReader("")));
            }
            return metadata;
        }
    }

    // implement SqlAbstractParserImpl
    public void setTabSize(int tabSize)
    {
        jj_input_stream.setTabSize(tabSize);
    }
}

PARSER_END(FarragoParserImpl)


/*****************************************
 * Syntactical Descriptions              *
 *****************************************/

/**
 * Allows parser to be extended with new types of table references.  The
 * default implementation of this production is empty.
 */
SqlNode ExtendedTableRef() :
{
}
{
    UnusedExtension()
    {
        return null;
    }
}

/**
 * Allows an OVER clause following a table expression as an extension to
 * standard SQL syntax. The default implementation of this production is empty.
 */
SqlNode TableOverOpt() :
{
}
{
    { return null; }
}

/*
 * Parses dialect-specific keywords immediately following the SELECT keyword.
 */
void SqlSelectKeywords(List keywords) :
{}
{
    E()
}

/*
 * Parses dialect-specific keywords immediately following the INSERT keyword.
 */
void SqlInsertKeywords(List keywords) :
{}
{
    E()
}

String NonReservedKeyWord() :
{
    String kw;
}
{
    (
        kw = CommonNonReservedKeyWord()
        {
            return kw;
        }
        |
        kw = DdlNonReservedKeyWord()
        {
            return kw;
        }
    )
}

CwmModelElement ExtensionModelDefinition() :
{
}
{
    UnusedExtension()
    {
        return null;
    }
}

CwmModelElement ExtensionModelSchemaObjDefinition() :
{
}
{
    UnusedExtension()
    {
        return null;
    }
}

CwmModelElement ExtensionModelDrop() :
{
}
{
    UnusedExtension()
    {
        return null;
    }
}

DdlStmt ExtensionModelAlter() :
{
}
{
    UnusedExtension()
    {
        return null;
    }
}

SqlNode ExtendedBuiltinFunctionCall() :
{
}
{
    UnusedExtension()
    {
        return null;
    }
}

/*
* Parse Floor/Ceil function parameters
*/
SqlNode FloorCeilOptions( SqlParserPos pos, boolean floorFlag) :
{
    SqlNode node;
}
{
    node = StandardFloorCeilOptions( pos, floorFlag )
    {
        return node;
    }
}

// End DdlParser.jj
