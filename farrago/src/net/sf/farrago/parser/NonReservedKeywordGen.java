/*
// $Id$
// Saffron preprocessor and data engine
// (C) Copyright 2002-2003 Disruptive Technologies, Inc.
// You must accept the terms in LICENSE.html to use this software.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation; either version 2.1
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*/

package net.sf.farrago.parser;

import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.StringReader;

/**
 * NonReservedKeywordsGen generates the a list non-reserved keywords to support the getSQLKeywords method
 *
 * @author Kinkoi Lo
 * @version $Id$
 */
public class NonReservedKeywordGen
{

    /**
     * Main generator entry point invoked by build.xml (target
     * "generateMetadataFactory").
     *
     * @param args <ul>
     * <li>args[0] = target file for .java output
     */
    public static void main(String[] args)
            throws Exception {
        assert (args.length == 1);
        String keywords = getKeywords();
        FileWriter writer = new FileWriter(args[0]);

        PrintWriter pw = new PrintWriter(writer);
        try {
            pw.println("// This code generated by NonReservedKeywordsGen-- do not edit");
            pw.println();
            pw.println("package net.sf.farrago.parser; ");
            pw.println();
            pw.println("public interface NonReservedKeyword");
            pw.println("{");
            pw.println();
            pw.print("      public String nonRservedKeywords = ");
            pw.print("\"");
            pw.print(keywords);
            pw.print("\"");
            pw.println(";");
            pw.println();
            pw.println("}");
        } finally {
            pw.flush();
            writer.close();
        }
    }

    private static String getKeywords() throws Exception {
        String[] tokens = FarragoParserImplConstants.tokenImage;
        StringBuffer sb = new StringBuffer();
        boolean withComma = false;
        for (int i = 0, size = tokens.length; i < size; i++) {
            String tokenVal = getTokenVal(tokens[i]);
            if (tokenVal != null && isNonReserved(tokenVal)) {
                if (withComma) {
                    sb.append(",");
                } else {
                    withComma = true;
                }
                sb.append(tokenVal);
            }
        }
        return sb.toString();
    }

    private static String getTokenVal(String token) {

        // We don't care about the token which are not string
        if (!token.startsWith("\"")) {
            return null;
        }
        // Remove the quote from the token
        int startIndex = token.indexOf("\"");
        int endIndex = token.lastIndexOf("\"");
        String tokenVal = token.substring(startIndex + 1, endIndex);
        char c = tokenVal.charAt(0);
        if (Character.isLetter(c)) {
            return tokenVal;
        }
        return null;
    }

    private static boolean isNonReserved(String keyword) {
        FarragoParserImpl parserImpl = new FarragoParserImpl(new StringReader(keyword));
        try {
            parserImpl.NonReservedKeyWord();
            return true;
        } catch (ParseException e) {
            return false;
        }
    }
}
