/*
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
*/
package net.sf.farrago.type;

import openjava.mop.*;

import openjava.ptree.*;

import org.eigenbase.reltype.*;


/**
 * OJTypeClass is a synthetic OJClass generated by FarragoTypeFactory as the
 * Java representation of a FarragoType.
 *
 * @author John V. Sichi
 * @version $Id$
 */
class OJTypedClass
    extends OJClass
{
    //~ Instance fields --------------------------------------------------------

    /**
     * Wrapped type.
     */
    RelDataType type;

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates a new OJTypedClass object.
     *
     * @param declarer scope in which synthetic class is declared
     * @param decl synthetic class declaration
     * @param type type being represented
     */
    OJTypedClass(
        OJClass declarer,
        ClassDeclaration decl,
        RelDataType type)
    {
        super(
            declarer.getEnvironment(),
            declarer,
            decl);
        this.type = type;
    }

    //~ Methods ----------------------------------------------------------------

    // NOTE:  we can use type object identity for equals/hashCode because
    // an OJTypeClass instance is only created for canonical type instances
    public boolean equals(Object o)
    {
        return (o instanceof OJTypedClass)
            && (((OJTypedClass) o).type == type);
    }

    // implement Object
    public int hashCode()
    {
        return type.hashCode();
    }
}

// End OJTypedClass.java
