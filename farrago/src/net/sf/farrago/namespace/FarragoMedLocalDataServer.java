/*
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
*/
package net.sf.farrago.namespace;

import java.sql.*;

import net.sf.farrago.fem.med.*;
import net.sf.farrago.fennel.*;

import org.eigenbase.rel.*;
import org.eigenbase.relopt.*;


/**
 * FarragoMedLocalDataServer represents a {@link FarragoMedDataServer} instance
 * originating from a {@link FarragoMedDataWrapper} managing local data. It
 * defines extra methods not relevant in the context of foreign data.
 *
 * @author John V. Sichi
 * @version $Id$
 */
public interface FarragoMedLocalDataServer
    extends FarragoMedDataServer
{
    //~ Methods ----------------------------------------------------------------

    /**
     * Sets the Fennel database handle to use for accessing local storage.
     *
     * @param fennelDbHandle the handle to use
     */
    public void setFennelDbHandle(FennelDbHandle fennelDbHandle);

    /**
     * Validates the definition of a table being created. May have side-effects
     * such as creating additional system-maintained indexes.
     *
     * @param table definition of the table being created
     * @param generatedPrimaryKeyIndex if non-null, a reference to an index
     * generated by the system to enforce the primary key
     */
    public void validateTableDefinition(
        FemLocalTable table,
        FemLocalIndex generatedPrimaryKeyIndex)
        throws SQLException;

    /**
     * Validates the definition of a table being created. May have side-effects
     * such as creating additional system-maintained indexes.
     *
     * @param table definition of the table being created
     * @param generatedPrimaryKeyIndex if non-null, a reference to an index
     * generated by the system to enforce the primary key
     * @param creation true if the table being validated is being newly created
     */
    public void validateTableDefinition(
        FemLocalTable table,
        FemLocalIndex generatedPrimaryKeyIndex,
        boolean creation)
        throws SQLException;

    /**
     * Creates an index.
     *
     * @param index definition of the index to create
     * @param txnContext Fennel txn context
     *
     * @return root PageId of index
     */
    public long createIndex(FemLocalIndex index, FennelTxnContext txnContext)
        throws SQLException;

    /**
     * Drops or truncates an index.
     *
     * @param index definition of the index to drop
     * @param rootPageId root PageId of index
     * @param truncate if true, only truncate storage; if false, drop storage
     * entirely
     * @param txnContext Fennel txn context
     */
    public void dropIndex(
        FemLocalIndex index,
        long rootPageId,
        boolean truncate,
        FennelTxnContext txnContext)
        throws SQLException;

    /**
     * Verifies an index and returns its page count.
     *
     * @param index definition of the index to verify
     * @param rootPageId root PageId of index
     * @param estimate whether to estimate statistics for a quicker result (and
     * at the cost of no unique key count)
     * @param txnContext Fennel txn context
     *
     * @return index statistics for the specified index
     */
    public FarragoMedLocalIndexStats computeIndexStats(
        FemLocalIndex index,
        long rootPageId,
        boolean estimate,
        FennelTxnContext txnContext)
        throws SQLException;

    /**
     * Creates a plan for loading existing rows of a table into an index.
     * Typically, the topmost node of this plan will be a {@link
     * net.sf.farrago.query.FarragoIndexBuilderRel}, and this plugin will supply
     * a rule which transforms that into a corresponding physical rel for
     * writing to the index. Where possible, the returned plan should consist of
     * logical rels, increasing optimization potential.
     *
     * @param table the optimizer representation for the indexed table
     * @param index the index to be loaded
     * @param cluster container for newly created relational expressions
     *
     * @return plan which will be used as input to optimization
     */
    public RelNode constructIndexBuildPlan(
        RelOptTable table,
        FemLocalIndex index,
        RelOptCluster cluster);

    /**
     * Versions the root page of an index
     *
     * @param oldRoot original root page
     * @param newRoot new versioned, root page
     * @param txnContext Fennel txn context
     */
    public void versionIndexRoot(
        Long oldRoot,
        Long newRoot,
        FennelTxnContext txnContext)
        throws SQLException;

    /**
     * Checks whether ALTER TABLE ADD COLUMN is implemented for tables stored by
     * this local data server.
     *
     * @return whether ALTER TABLE ADD COLUMN can be executed
     */
    public boolean supportsAlterTableAddColumn();
}

// End FarragoMedLocalDataServer.java
