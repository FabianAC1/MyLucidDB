/*
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
*/
package org.eigenbase.runtime;

import java.lang.reflect.*;


/**
 * <code>SyntheticObject</code> is a base class for all objects built 'on the
 * fly' by the saffron system. For example, if you write
 *
 * <blockquote>
 * <pre>for (i in select {emp.firstName, emp.lastName} from emps as emp) {
 *     ...
 * }</pre>
 * </blockquote>
 *
 * then <code>i</code>'s type will be a class, generated by the saffron
 * compiler, something like this:
 *
 * <blockquote>
 * <pre>class saffron.runtime.Dummy_a01bc65 extends {@link SyntheticObject} {
 *     public String firstName;
 *     public String lastName;
 * }</pre>
 * </blockquote>
 *
 * @author jhyde
 * @version $Id$
 * @since 23 April, 2002
 */
public abstract class SyntheticObject
{

    //~ Fields ----------------------------------------------------------------
    Field[] fields = null;

    //~ Methods ----------------------------------------------------------------

    /**
     * Returns the value of a given field.
     */
    public Object getFieldValue(int i)
    {
        try {
            Field field = getFields()[i];
            return field.get(this);
        } catch (IllegalArgumentException e) {
            return null;
        } catch (IllegalAccessException e) {
            return null;
        }
    }

    /**
     * Returns the fields of this object, in the order they were specified in
     * the original query.
     */
    public Field [] getFields()
    {
        if (fields == null) {
            fields = getClass().getDeclaredFields();
        }
        return fields;
    }
}

// End SyntheticObject.java
