So far, Fennel development has been targeted to Linux x86 and
Cygwin+Mingw, so the code is unlikely to build or run without
modification on any other platform.  If you are building for Mingw,
read INSTALL.mingw also before attempting the instructions below.

======================================================================
SIMPLE CONFIGURATION

The Fennel build is based on GNU autotools.  Versions known to work
are automake v1.7.6 and above; autoconf v2.57 and above; libtool v1.5
and above; and make v3.79.1 and above.

Fennel itself relies on the Boost library from http://www.boost.org
(at least v1.31), and STLport from http://www.stlport.com (at least
v4.6.2).  Optionally, Fennel can use the ICU library from
http://oss.software.ibm.com/icu for i18n support (this doesn't work
with mingw yet).

The simplest way to configure and build Fennel is to run:

./initBuild.sh [--with-farrago|--without-farrago]

This script will execute all of the steps laid out below, but assumes
the presence of the dev/thirdparty directory from the Perforce source
control sever that Fennel resides on (see README).  Map
//open/dev/thirdparty to a directory called thirdparty with the same
parent directory as Fennel.  The initBuild.sh script will change to
../thirdparty, extract the copies of Boost, STLport, and ICU archived
there and build them.

If you wish to obtain your own copies of thirdparty components, or don't
want to maintain the required directory structure, the following are
step-by-step instructions for configuring and building Fennel without
using initBuild.sh.

======================================================================
CONFIGURE

To configure, run:

autoreconf --force --install (not needed if building from a tarball)
./configure --with-boost=$BOOST_DIR --with-stlport=$STLPORT_DIR \
    [--with-icu=$ICU_DIR] \
    [--with-farrago] [--with-optimization]

(If you are building with support for the companion project Farrago,
you must have JAVA_HOME defined.  See http://farrago.sourceforge.net
if you don't know what Farrago is.)

You must supply the source locations for external libraries via
--with-boost and --with-stlport (and optionally --with-icu).
Instructions are provided below on how to build these libraries for
use by Fennel.  (This is only required for the first build; after that
the third-party libraries never change until an upgrade is required.)

The default is a debug build; for a release build, specify
--with-optimization.  

If at some point you run into configuration/build problems and need to
retry after upgrading required tools, beware of cached information
left behind by a failed run.  The safest thing to do is to delete
everything and restart from a clean source tree; at the very least, rm
-rf the autom4te.cache directory.

======================================================================
THIRD-PARTY LIBS

configure generates scripts in the build subdirectory which will build
the third-party libraries for you; run them as follows (if you
experience errors with buildStlportLibs.sh, read the comments at the
top of the script to resolve the problem):

cd build
buildStlportLibs.sh
buildBoostLibs.sh
# optional
buildICULibs.sh

======================================================================
MAIN BUILD

Once those scripts complete, you can build fennel itself:

cd ..
make

======================================================================
RUN TESTS

I have not yet tried "make install" so I doubt
that it does anything correctly; for now, just run from the build
directly.  For this to work, you need to modify your LD_LIBRARY_PATH;
configure generates a script for this purpose, which you should source
before running anything which links with Fennel:

. fennelenv.sh

To test the build, execute the command "make check", which will run
all unit tests.

======================================================================
DEBUG

To debug, run gdb on an executable in the test/.libs directory.  (gdb
doesn't work on the wrappers in the test directory.)  On Cygwin, gdb
encounters spurious segfaults from pthreads (the location is
KERNEL32!IsBadWritePtr).  You can continue past these, or if there are
too many, use this gdb command:

handle SIGSEGV nostop noprint

Of course, if you're trying to track down a real segfault, that's not
very helpful, but the Cygwin build probably isn't very useful for much
anyway.  Mingw debugging does not have this problem.
======================================================================
